# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Account {
  id: ID!
  accountType: AccountType!
  firstName: String!
  lastName: String!
  name: String!
  email: String!
  phone: String
  authCount: Float
}

enum AccountType {
  admin
  parent
  student
}

type Admin {
  id: ID!
  accountType: AccountType!
  firstName: String!
  lastName: String!
  name: String!
  email: String!
  phone: String
  authCount: Float
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Group {
  id: ID!
  name: String!
  description: String!
  minMenteeGradeLevel: Int!
  minMentorGradeLevel: Int!
  mentors: [Student!]
  mentees: [Student!]!
  meetings: [Meeting!]!
}

type Material {
  id: ID!
  title: String!
  author: String
  type: String!
  url: String!
  dueDate: DateTime!
  notes: String!
}

type Meeting {
  id: ID!
  date: DateTime!

  """minutes since midnight"""
  startMin: Int!

  """minutes since midnight"""
  endMin: Int!
  title: String!
  description: String!
  location: String!
  capacity: Int!
  group: Group!
  attendingMentors: [Student!]
  attendingMentees: [Student!]!
  materials: [Material!]!
}

type Mutation {
  signUp(input: SignUpInput!): String!
  createUser(input: SignUpInput!): User!
}

type Parent {
  id: ID!
  accountType: AccountType!
  firstName: String!
  lastName: String!
  name: String!
  email: String!
  phone: String
  authCount: Float
  children: [Student!]!
}

type Query {
  me: User!
}

input SignUpInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  role: UserRole!
}

type Student {
  id: ID!
  accountType: AccountType!
  firstName: String!
  lastName: String!
  name: String!
  email: String!
  phone: String
  authCount: Float
  parents: [Parent!]!
  gradeLevel: Int!
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  name: String!
  email: String!
  role: UserRole!
  authCount: Float
}

"""User access role"""
enum UserRole {
  PARENT
  STUDENT
  ADMIN
}
