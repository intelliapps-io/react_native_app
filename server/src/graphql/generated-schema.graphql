# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Account {
  id: ID!
  accountType: AccountType!
  firstName: String!
  lastName: String!
  name: String!
  email: String!
  phone: String
  authCount: Float
  meetings: [Meeting!]!
}

enum AccountType {
  admin
  parent
  student
}

type Admin {
  id: ID!
  accountType: AccountType!
  firstName: String!
  lastName: String!
  name: String!
  email: String!
  phone: String
  authCount: Float
  meetings: [Meeting!]!
  nickname: String
}

input CreateAccountInput {
  firstName: String!
  lastName: String!
  email: String!
  phone: String
  password: String!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Group {
  id: ID!
  name: String!
  description: String!
  minMenteeGradeLevel: Int!
  minMentorGradeLevel: Int!
  mentors: [Student!]
  mentees: [Student!]!
  meetings: [Meeting!]!
}

input GroupInput {
  name: String!
  description: String!
  minMenteeGradeLevel: Int!
  minMentorGradeLevel: Int!
}

type Material {
  id: ID!
  title: String!
  author: String
  type: String!
  url: String!
  dueDate: DateTime!
  notes: String!
}

type Meeting {
  id: ID!
  date: String!

  """minutes since midnight"""
  startMin: Int!

  """minutes since midnight"""
  endMin: Int!
  title: String!
  description: String!
  location: String!
  capacity: Int!
  group: Group!
  attendingMentors: [Student!]
  attendingMentees: [Student!]!
  materials: [Material!]!
}

input MeetingInput {
  date: DateTime!

  """minutes since midnight"""
  startMin: Int!

  """minutes since midnight"""
  endMin: Int!
  title: String!
  description: String!
  location: String!
  capacity: Int!
  groupId: String!
}

type Mutation {
  createStudentAccount(input: StudentInput!): Account!
  createParentAccount(input: ParentInput!): Account!
  login(password: String!, email: String!): Account
  logout: String
  addParent(parentEmail: String!): Student!
  removeParent(parentEmail: String!): Student!
  addStudent(studentEmail: String!): Parent!
  removeStudent(studentEmail: String!): Parent!
  createGroup(input: GroupInput!): Group!
  deleteGroup(id: String!): String!
  editGroup(input: GroupInput!, id: String!): Group!
  joinGroupMentee(id: String!): Group!
  leaveGroupMentee(id: String!): Group!
  joinGroupMentor(id: String!): Group!
  leaveGroupMentor(id: String!): Group!
  createMeeting(input: MeetingInput!): Meeting!
  updateMeeting(input: MeetingInput!, id: String!): Meeting!
  deleteMeeting(id: String!): String!
  joinMeeting(id: String!): Meeting!
  leaveMeeting(id: String!): Meeting!
}

type Parent {
  id: ID!
  accountType: AccountType!
  firstName: String!
  lastName: String!
  name: String!
  email: String!
  phone: String
  authCount: Float
  meetings: [Meeting!]!
  children: [Student!]!
}

input ParentInput {
  firstName: String!
  lastName: String!
  email: String!
  phone: String
  password: String!
  studentsEmail: [String!]
}

type Query {
  me: Account!
  student(input: QueryStudentInput!): Student!
  parent(input: QueryParentInput!): Parent!
  group(id: String!): Group!
  groups: [Group!]!
  meeting(id: String!): Meeting!
  meetings: [Meeting!]!
}

input QueryParentInput {
  id: String
  email: String
}

input QueryStudentInput {
  id: String
  email: String
}

type Student {
  id: ID!
  accountType: AccountType!
  firstName: String!
  lastName: String!
  name: String!
  email: String!
  phone: String
  authCount: Float
  meetings: [Meeting!]!
  parents: [Parent!]
  mentorGroups: [Group!]!
  menteeGroups: [Group!]!
  gradeLevel: Int!
}

input StudentInput {
  firstName: String!
  lastName: String!
  email: String!
  phone: String
  password: String!
  parentsEmail: [String!]
  gradeLevel: Int!
}
