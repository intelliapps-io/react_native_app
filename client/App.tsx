// UI Packages
import React, { useEffect } from 'react'
import * as eva from '@eva-design/eva'
import { ApplicationProvider, IconRegistry, Spinner } from '@ui-kitten/components'
import { EvaIconsPack } from '@ui-kitten/eva-icons'
import { SafeAreaProvider } from 'react-native-safe-area-context'

// App Root
import { AppRoot } from './src/AppRoot'

// GraphQL Packages
import { ApolloClient } from 'apollo-client'
import { ApolloProvider } from '@apollo/react-hooks'
import { InMemoryCache, IntrospectionFragmentMatcher } from 'apollo-cache-inmemory'
import { HttpLink } from 'apollo-link-http'

// generated by Fragment Matcher plugin
import introspectionResult from './src/lib/introspectionResult';
// import introspectionQueryResultData from './src/lib/introspection.json'

const fragmentMatcher = new IntrospectionFragmentMatcher({
  introspectionQueryResultData: introspectionResult,
})

// const GRAPHQL_SERVER_URL = '192.168.1.226'
const GRAPHQL_SERVER_URL = '10.0.0.18'

const client = new ApolloClient({
  link: new HttpLink({ 
    credentials: 'include',
    uri: `http://${GRAPHQL_SERVER_URL}:3001/graphql`,
    headers: {
      "Access-Control-Allow-Origin": `http://${GRAPHQL_SERVER_URL}:3001`
    }
  }),
  cache: new InMemoryCache({ fragmentMatcher })
})

export default () => {
  return (
    <SafeAreaProvider>
      <IconRegistry icons={EvaIconsPack} />
      <ApplicationProvider {...eva} theme={eva.light}>
        <ApolloProvider client={client}>
          <AppRoot />
        </ApolloProvider>
      </ApplicationProvider>
    </SafeAreaProvider>
  )
}